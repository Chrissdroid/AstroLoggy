---
import Layout from '$/layouts/PageLayout.astro'
import HeaderAnchor from '$/components/HeaderAnchor.astro'

import Markdown from '@astrojs/markdown-component';
import { createI18n } from '$/scripts/i18n'
import { getCollection, type CollectionEntry } from "astro:content";

export const getStaticPaths = createI18n('blog')
const { translations, langs } = Astro.props
const { lang } = Astro.params as { [key: string]: string }

const post = await getCollection('blog')

const getSlugInfo = (post: CollectionEntry<"blog">) => {
	const [lang, slug]: string[] = post.slug.split('/')

	return {
		lang,
		slug,
	}
}

const sortedPosts = post.filter(post => {
	const { lang: postLang } = getSlugInfo(post)

	return !post.data.draft && lang === postLang
}).sort((a, b) => {
	return b.data.published_at.getTime() - a.data.published_at.getTime()
})

const getId = (post: CollectionEntry<"blog">) => {
	const {slug} = getSlugInfo(post)

	return slug
}
---


<Layout {translations} {langs} {lang} padding>
	<section id="index"  data-role="heading">
		<h1>{translations.title}</h1>
		<p>{translations.description}</p>
	</section>

	<section id="about">
		<h2>{translations.latestArticles}</h2>
		<ol id="articles-list" role="list">
			{sortedPosts.map((post) => (
				<li>
					<article data-theme={post.data.theme} itemscope itemtype="https://schema.org/BlogPosting">
						<header>
							<div class="temporal">
								<p>
									{translations.articles.published}
									<date itemprop="datePublished" datetime={post.data.published_at} set:text={post.data.published_at.toLocaleDateString(lang)}></date>
									<date itemprop="dateModified" datetime={post.data.modified_at || post.data.published_at}></date>
								</p>
							</div>
							<h3 id={getId(post)} itemprop="headline">
								{post.data.title}
								<HeaderAnchor lang={lang} id={getId(post)} />
							</h3>
							<p>
								{translations.articles.by}
								<a href={post.data.author.url} itemprop="author" set:text={post.data.author.name}></a>
							</p>
						</header>

						<Markdown content={post.data.description} />

						<footer>
							<a itemprop="url" href={`/${lang}/blog/` + getId(post)}>{translations.articles.readMore}</a>
						</footer>
					</article>
				</li>
			))}
		</ol>

		{sortedPosts.length === 0 && (
			<div class="empty">
				<i aria-hidden><svg width="72" height="72" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.877075 7.49972C0.877075 3.84204 3.84222 0.876892 7.49991 0.876892C11.1576 0.876892 14.1227 3.84204 14.1227 7.49972C14.1227 11.1574 11.1576 14.1226 7.49991 14.1226C3.84222 14.1226 0.877075 11.1574 0.877075 7.49972ZM7.49991 1.82689C4.36689 1.82689 1.82708 4.36671 1.82708 7.49972C1.82708 10.6327 4.36689 13.1726 7.49991 13.1726C10.6329 13.1726 13.1727 10.6327 13.1727 7.49972C13.1727 4.36671 10.6329 1.82689 7.49991 1.82689ZM8.24993 10.5C8.24993 10.9142 7.91414 11.25 7.49993 11.25C7.08571 11.25 6.74993 10.9142 6.74993 10.5C6.74993 10.0858 7.08571 9.75 7.49993 9.75C7.91414 9.75 8.24993 10.0858 8.24993 10.5ZM6.05003 6.25C6.05003 5.57211 6.63511 4.925 7.50003 4.925C8.36496 4.925 8.95003 5.57211 8.95003 6.25C8.95003 6.74118 8.68002 6.99212 8.21447 7.27494C8.16251 7.30651 8.10258 7.34131 8.03847 7.37854L8.03841 7.37858C7.85521 7.48497 7.63788 7.61119 7.47449 7.73849C7.23214 7.92732 6.95003 8.23198 6.95003 8.7C6.95004 9.00376 7.19628 9.25 7.50004 9.25C7.8024 9.25 8.04778 9.00601 8.05002 8.70417L8.05056 8.7033C8.05924 8.6896 8.08493 8.65735 8.15058 8.6062C8.25207 8.52712 8.36508 8.46163 8.51567 8.37436L8.51571 8.37433C8.59422 8.32883 8.68296 8.27741 8.78559 8.21506C9.32004 7.89038 10.05 7.35382 10.05 6.25C10.05 4.92789 8.93511 3.825 7.50003 3.825C6.06496 3.825 4.95003 4.92789 4.95003 6.25C4.95003 6.55376 5.19628 6.8 5.50003 6.8C5.80379 6.8 6.05003 6.55376 6.05003 6.25Z" fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path></svg></i>
				<p set:text={translations.noArticles}></p>
			</div>
		)}
	</section>

</Layout>

<style lang="scss">

	:global(main) {
		padding-bottom: 5em;
	}

	#about {
		padding: 6rem clamp(2rem, 5vw, 10rem);
		border-top: 3px solid var(--active-200);

		ul {
			padding-left: 2rem;
		}
	}

	.empty {
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
		gap: 1rem;
		color: var(--glass-border);
	}

	#articles-list {
		list-style: none;
		display: flex;
		flex-wrap: wrap;
		justify-content: flex-start;
		align-items: flex-start;
		padding-inline: clamp(1em, 5vw, 5em);
		padding-block: 2em;
		gap: 2rem 1.5rem;

		li {
			flex: 0 0 clamp(18em, 45%, 20em);

			article {
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				align-items: stretch;
				position: relative;

				padding: .75em 1em .33em;
				border: 1px solid var(--glass-border);
				background-color: var(--body-accent);
				box-shadow: 0 4px 10px var(--glass-shadow);
				border-radius: 1em;

				.temporal {
					padding: .25em 1em;
					color: var(--body-accent);
					border: 1px solid var(--glass-border);
					background-color: var(--glass-bg);
					box-shadow: 0 4px 10px var(--glass-shadow);
					border-radius: 1rem;
					backdrop-filter: blur(5px);

					p {
						margin-bottom: 0;
						font-size: clamp(1rem, .5vw, 2rem);
					}

					position: absolute;
					top: 0;
					left: 0;
					transform: translate(-15%, -50%);
				}

				header {
					padding: .5em 0;

					h3 {
						margin-bottom: 0;
					}

					p {
						font-size: clamp(1rem, .75vw, 2rem);
					}
				}

				footer {
					flex: 1 0 100%;
					display: flex;
					justify-content: flex-end;
					padding: .5em 1em;
				}
			}
		}
	}

</style>