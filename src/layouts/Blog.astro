---
import type { Page } from '&/page.d'
import Layout from '$/layouts/PageLayout.astro'
import Sidebar from '$/components/navigation/Sidebar.astro';
import { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';

export interface Props {
	lang: string
	translations: {
		[key: string]: any,
		page: Page
	}
	theme?: "astro" | "loggy" | "default" | undefined
	Post: CollectionEntry<'blog'>
}

const { translations, lang, theme = "default", Post } = Astro.props

const Headers = (await Post.render()).headings;

const share = {
	url: Astro.url.href,
	title: Post.data.title,
	text: Post.data.description,
}

---

<Layout translations={{...translations, title: Post.data.title}} {lang} {theme} {share} padding>

	<article itemscope itemtype="https://schema.org/BlogPosting">
		<header>
			{Post.data.image && (
				<Image
					src={Post.data.image.src}
					alt={Post.data.image?.alt}
					width={854}
					height={480}
				/>
			)}
			<div class="temporal">
				<p>
					{translations.articles.published}
					<date itemprop="datePublished" datetime={Post.data.published_at} set:text={Post.data.published_at.toLocaleDateString(lang)}></date>
					{Post.data.modified_at && Post.data.published_at !== Post.data.modified_at ? (
						<span>
							&mdash;&nbsp;{translations.articles.updated}
							<date itemprop="dateModified" datetime={Post.data.modified_at} set:text={Post.data.modified_at.toLocaleDateString(lang)}></date>
						</span>
					): (
						<date itemprop="dateModified" datetime={Post.data.modified_at || Post.data.published_at}></date>
					)}
				</p>
			</div>

			<h1 itemprop="headline">{Post.data.title}</h1>
			<p>
				{translations.articles.by}
				<a href={Post.data.author.url} itemprop="author" itemscope itemtype="https://schema.org/Person">
					{Post.data.author.name}
				</a>
			</p>
		</header>

		<aside>
			<Sidebar lang={lang} headers={Headers} />
		</aside>

		<section class="content">
			<slot />
		</section>
	</article>

</Layout>

<style lang="scss">

article {
	display: flex;
	flex-direction: row-reverse;
	flex-wrap: wrap;
	justify-content: center;
	align-items: stretch;
	gap: 1.5em;

	> header {
		overflow: hidden;
		position: relative;
		flex: 1 0 100%;
		display: flex;
		flex-direction: column;
		justify-content: space-between;
		padding: 3em 1em 0;
		border-bottom-right-radius: 1.5em;
		border-bottom: 2px solid var(--glass-border);
		border-right: 2px solid var(--glass-border);
		box-shadow: 0 4px 5px var(--glass-shadow);

		background: linear-gradient(60deg, var(--navigation-accent) 70%, transparent);

		img {
			z-index: -1;
			position: absolute !important;
			right: 0;
			top: 0;
			height: 100% !important;
			width: auto;
		}

		.temporal {
			color: var(--glass-accent);
		}

		> p {
			padding-left: 2em;
			font-size: clamp(1em, 1.5vw, 1.5em);
		}
	}

	> .content {
		flex: 0 0 clamp(22em, 75vw, 45em);
		padding: 0 2em;
		overflow: hidden;
		padding-bottom: 5em;
	}

	> aside {
		display: flex;
		justify-content: flex-start;
		align-items: flex-start;
		flex: 0 0 clamp(10em, 17.5vw, 12em);
	}
}

</style>